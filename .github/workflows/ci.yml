name: CI

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-commits:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate PR commits with commitlint
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  lint-code:
    name: Lint Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js (Frontend)
        if: matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python (Backend)
        if: matrix.service == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies (Frontend)
        if: matrix.service == 'frontend'
        working-directory: frontend
        run: npm ci

      - name: Install dependencies (Backend)
        if: matrix.service == 'backend'
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint black flake8 mypy

      - name: Lint Frontend
        if: matrix.service == 'frontend'
        working-directory: frontend
        run: |
          npm run lint || true
          echo "Frontend linting completed"

      - name: Lint Backend
        if: matrix.service == 'backend'
        working-directory: backend
        run: |
          black --check app/ || true
          flake8 app/ || true
          echo "Backend linting completed"

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        working-directory: backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        working-directory: backend
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run tests
        working-directory: frontend
        run: npm test -- --coverage || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, asr, nlp, worker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service }} image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service == 'asr' && 'services/asr' || matrix.service == 'nlp' && 'services/nlp' || matrix.service }}
          file: ./${{ matrix.service == 'asr' && 'services/asr' || matrix.service == 'nlp' && 'services/nlp' || matrix.service }}/Dockerfile
          push: false
          tags: writers-notetaker-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Create .env file
        run: |
          cat > .env << EOF
          POSTGRES_USER=testuser
          POSTGRES_PASSWORD=testpass
          POSTGRES_DB=testdb
          REDIS_URL=redis://redis:6379/0
          SECRET_KEY=test-secret-key
          EOF

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d postgres redis
          sleep 10

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # docker-compose exec -T backend pytest tests/integration/

      - name: Tear down services
        if: always()
        run: docker-compose down -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

