# =============================================================================
# Docker Compose Configuration for Production Deployment
# =============================================================================
# This file defines the services required to run the application, including:
# - Frontend: The web user interface.
# - Backend: The API server.
# - Worker: The background job processor.
# - PostgreSQL: The primary database.
# - Redis: The cache and queue manager.
# =============================================================================

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # PostgreSQL Database Service
  # ---------------------------------------------------------------------------
  # The primary database, configured to use an SSD for optimal performance.
  postgres:
    image: postgres:15-alpine
    container_name: app-postgres
    restart: unless-stopped
    
    # Ports - Uncomment for external access if needed.
    # ports:
    #   - "5432:5432"
    
    # Database environment variables.
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-myapp_db}
      POSTGRES_USER: ${POSTGRES_USER:-myapp_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      # PostgreSQL optimization settings.
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-100}
      PGDATA: /var/lib/postgresql/data/pgdata
    
    # Data volumes for persistence.
    volumes:
      # Main PostgreSQL data directory on SSD.
      - postgres_data:/var/lib/postgresql/data
      # Custom configuration files (optional).
      # - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      # - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      # Initialization scripts (optional).
      # - ./postgres/init-scripts:/docker-entrypoint-initdb.d:ro
    
    # Health check to ensure the service is ready.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myapp_user} -d ${POSTGRES_DB:-myapp_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Network settings.
    networks:
      - app-network
    
    # Resource limits (optional - to prevent excessive resource usage).
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: 2G
    #     reservations:
    #       cpus: '1'
    #       memory: 1G

  # ---------------------------------------------------------------------------
  # Redis Cache & Queue Service
  # ---------------------------------------------------------------------------
  # Service for caching and managing job queues.
  redis:
    image: redis:7-alpine
    container_name: app-redis
    restart: unless-stopped
    
    # Command to run with security settings.
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    
    # Ports - Uncomment for external access if needed.
    # ports:
    #   - "6379:6379"
    
    # Data volumes for persistence.
    volumes:
      - redis_data:/data
    
    # Health check.
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    networks:
      - app-network
    
    # Resource limits.
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '1'
    #       memory: 512M

  # ---------------------------------------------------------------------------
  # Backend API Service
  # ---------------------------------------------------------------------------
  # The main API server.
  backend:
    # You can use an image from a Docker registry or build it locally.
    # image: your-registry.com/app-backend:latest
    build:
      context: ../backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    
    container_name: app-backend
    restart: unless-stopped
    
    # Service ports.
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    
    # Load environment variables.
    env_file:
      - ../.env                    # Global variables.
      - ../backend/.env            # Backend-specific variables.
    
    # Additional environment variables.
    environment:
      # Connect to services on the Docker network.
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/${REDIS_CACHE_DB:-0}
      # Storage path.
      STORAGE_ROOT: /storage
      NODE_ENV: ${NODE_ENV:-production}
    
    # Volumes.
    volumes:
      # Access to the main storage (100TB).
      - /storage:/storage
      # Logs (optional).
      - backend_logs:/var/log/app
      # Temporary upload files.
      - backend_uploads:/tmp/uploads
    
    # Dependencies - Wait for other services to be ready.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Health check.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - app-network
    
    # Resource limits.
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '2'
    #       memory: 2G

  # ---------------------------------------------------------------------------
  # Worker Service
  # ---------------------------------------------------------------------------
  # Background job processor.
  worker:
    # image: your-registry.com/app-worker:latest
    build:
      context: ../worker
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    
    container_name: app-worker
    restart: unless-stopped
    
    # Load environment variables.
    env_file:
      - ../.env                    # Global variables.
      - ../worker/.env             # Worker-specific variables.
    
    # Additional environment variables.
    environment:
      # Connect to services.
      POSTGRES_HOST: postgres
      REDIS_HOST: redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/${REDIS_QUEUE_DB:-2}
      # Storage path.
      STORAGE_ROOT: /storage
      NODE_ENV: ${NODE_ENV:-production}
      # Worker settings.
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-5}
      WORKER_MAX_RETRIES: ${WORKER_MAX_RETRIES:-3}
    
    # Volumes.
    volumes:
      # Access to storage for file processing.
      - /storage:/storage
      # Logs.
      - worker_logs:/var/log/app
    
    # Dependencies.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    
    # Health check (optional - depends on implementation).
    # healthcheck:
    #   test: ["CMD", "node", "healthcheck.js"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    
    networks:
      - app-network
    
    # Resource limits.
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '4'
    #       memory: 4G
    #   replicas: 2  # You can run multiple instances of the worker.

  # ---------------------------------------------------------------------------
  # Frontend Service
  # ---------------------------------------------------------------------------
  # Web user interface.
  frontend:
    # image: your-registry.com/app-frontend:latest
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    
    container_name: app-frontend
    restart: unless-stopped
    
    # Service ports.
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    
    # Load environment variables.
    env_file:
      - ../.env                    # Global variables.
      - ../frontend/.env.local     # Frontend-specific variables.
    
    # Additional environment variables.
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_APP_URL: ${APP_URL:-http://localhost:3000}
    
    # Volumes (if needed).
    volumes:
      # Logs.
      - frontend_logs:/var/log/app
      # Static files (if generated dynamically).
      # - frontend_static:/app/.next/static
    
    # Dependencies.
    depends_on:
      backend:
        condition: service_healthy
    
    # Health check.
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - app-network

# =============================================================================
# Networks
# =============================================================================
networks:
  app-network:
    driver: bridge
    name: app-network

# =============================================================================
# Volumes
# =============================================================================
# Data volumes for persistence.
volumes:
  # PostgreSQL data - Store on SSD for better performance.
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      # SSD path - Corresponds to setup_postgresql.sh script.
      device: ${SSD_MOUNT_POINT:-/mnt/ssd}/postgresql/data
  
  # Redis data.
  redis_data:
    driver: local
  
  # Application logs.
  backend_logs:
    driver: local
  
  worker_logs:
    driver: local
  
  frontend_logs:
    driver: local
  
  # Temporary uploads.
  backend_uploads:
    driver: local

# =============================================================================
# Usage Instructions
# =============================================================================
#
# Start services:
#   docker-compose -f infrastructure/docker-compose.yml up -d
#
# View logs:
#   docker-compose -f infrastructure/docker-compose.yml logs -f [service_name]
#
# Stop services:
#   docker-compose -f infrastructure/docker-compose.yml down
#
# Stop and remove volumes (dangerous!):
#   docker-compose -f infrastructure/docker-compose.yml down -v
#
# Restart a specific service:
#   docker-compose -f infrastructure/docker-compose.yml restart backend
#
# Scale the worker:
#   docker-compose -f infrastructure/docker-compose.yml up -d --scale worker=3
#
# =============================================================================
